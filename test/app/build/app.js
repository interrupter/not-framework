(function () {
'use strict';

class ncInit extends notFramework.notController {
	constructor(app, params) {
		super(app);
		this.setModuleName('main');
		this.rebuildContainer();
		return this;
	}

	rebuildContainer() {
		document.getElementById("test").innerHTML = '<h1>Контроллер инициализации отработал, через 5 секунд подрубиться main контроллер, загрузит и отрендерит шаблон с простой связкой с данными</h1>';
	}
}

class ncMain extends notFramework.notController {
	constructor(app, params) {
		super(app);
		this.setModuleName('main');
		this.setData(new notFramework.notRecord({}, {
			time: 0
		}));
		this.setViews({
			default: {
				common: false,
				name: 'default',
				//если не указано, по причине того что на текущий момент этот элемент не существует
				targetEl: document.querySelector('#test'),
				//смотрим здесь
				targetQuery: '#test'
			}
		});
		this.preload()
			.then(() => {
				this.setReady(true);
				setInterval(this.makeSecond.bind(this),1000);
			})
			.catch(notFramework.notCommon.report)
		return this;
	}

	preload() {
		this.setReady(false);
		return new Promise((resolve, reject) => {
			setTimeout(resolve, 5000);
		});
	}

	makeSecond(){
		this.getData().time+=1;
	}
}

class ncUser extends notFramework.notController {
	constructor(app){
		super(app);
		this.setViews({
			default: {
				common: false,
            	name: 'default',
            	placeId: 'content'
			}
		});
		return this;
	}
}

class ncPost extends notFramework.notController {
	constructor(app){
		super(app);

		return this;
	}
}

class ncCountry extends notFramework.notController {
	constructor(app){
		super(app);

		return this;
	}
}

let appOptions = {
	//url from which will take interfaceManifest json file
	interfaceManifestURL: '/framework/test/app/manifest.json',
	//routes for client-side
	siteManifest: {
		//routie route desription: controller name, real controller is function preffixed with 'nc', ncMain, ncPublication
		'': ncMain,
		'user/:param?': ncUser,
		'post/:param?': ncPost,
		'country/:param?': ncCountry,
	},
	//base controller, executed on every site page before any other controller
	initController: ncInit,
	//form auto generation
	forms: {
		//common is for profile
		//associated object is options for generator object
		//default generator notForm
		common: {
			templateUrl: '/framework/test/templates/lib.html'
		}
	},
	paths:{
		common: '/framework/test/templates/common',
		modules: '/framework/test/app/modules'
	}
};

notFramework.notCommon.startApp(()=> new notFramework.notApp(appOptions));

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi4uL21vZHVsZXMvbWFpbi9uY0luaXQuanMiLCIuLi9tb2R1bGVzL21haW4vbmNNYWluLmpzIiwiLi4vbW9kdWxlcy91c2VyL2luZGV4LmpzIiwiLi4vbW9kdWxlcy9wb3N0L2luZGV4LmpzIiwiLi4vbW9kdWxlcy9jb3VudHJ5L2luZGV4LmpzIiwiLi4vYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIG5jSW5pdCBleHRlbmRzIG5vdEZyYW1ld29yay5ub3RDb250cm9sbGVyIHtcblx0Y29uc3RydWN0b3IoYXBwLCBwYXJhbXMpIHtcblx0XHRzdXBlcihhcHApO1xuXHRcdHRoaXMuc2V0TW9kdWxlTmFtZSgnbWFpbicpO1xuXHRcdHRoaXMucmVidWlsZENvbnRhaW5lcigpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cmVidWlsZENvbnRhaW5lcigpIHtcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3RcIikuaW5uZXJIVE1MID0gJzxoMT7QmtC+0L3RgtGA0L7Qu9C70LXRgCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCDQvtGC0YDQsNCx0L7RgtCw0LssINGH0LXRgNC10LcgNSDRgdC10LrRg9C90LQg0L/QvtC00YDRg9Cx0LjRgtGM0YHRjyBtYWluINC60L7QvdGC0YDQvtC70LvQtdGALCDQt9Cw0LPRgNGD0LfQuNGCINC4INC+0YLRgNC10L3QtNC10YDQuNGCINGI0LDQsdC70L7QvSDRgSDQv9GA0L7RgdGC0L7QuSDRgdCy0Y/Qt9C60L7QuSDRgSDQtNCw0L3QvdGL0LzQuDwvaDE+Jztcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBuY0luaXQ7XG4iLCJjbGFzcyBuY01haW4gZXh0ZW5kcyBub3RGcmFtZXdvcmsubm90Q29udHJvbGxlciB7XG5cdGNvbnN0cnVjdG9yKGFwcCwgcGFyYW1zKSB7XG5cdFx0c3VwZXIoYXBwKTtcblx0XHR0aGlzLnNldE1vZHVsZU5hbWUoJ21haW4nKTtcblx0XHR0aGlzLnNldERhdGEobmV3IG5vdEZyYW1ld29yay5ub3RSZWNvcmQoe30sIHtcblx0XHRcdHRpbWU6IDBcblx0XHR9KSk7XG5cdFx0dGhpcy5zZXRWaWV3cyh7XG5cdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdGNvbW1vbjogZmFsc2UsXG5cdFx0XHRcdG5hbWU6ICdkZWZhdWx0Jyxcblx0XHRcdFx0Ly/QtdGB0LvQuCDQvdC1INGD0LrQsNC30LDQvdC+LCDQv9C+INC/0YDQuNGH0LjQvdC1INGC0L7Qs9C+INGH0YLQviDQvdCwINGC0LXQutGD0YnQuNC5INC80L7QvNC10L3RgiDRjdGC0L7RgiDRjdC70LXQvNC10L3RgiDQvdC1INGB0YPRidC10YHRgtCy0YPQtdGCXG5cdFx0XHRcdHRhcmdldEVsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVzdCcpLFxuXHRcdFx0XHQvL9GB0LzQvtGC0YDQuNC8INC30LTQtdGB0Yxcblx0XHRcdFx0dGFyZ2V0UXVlcnk6ICcjdGVzdCdcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLnByZWxvYWQoKVxuXHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnNldFJlYWR5KHRydWUpO1xuXHRcdFx0XHRzZXRJbnRlcnZhbCh0aGlzLm1ha2VTZWNvbmQuYmluZCh0aGlzKSwxMDAwKTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2gobm90RnJhbWV3b3JrLm5vdENvbW1vbi5yZXBvcnQpXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwcmVsb2FkKCkge1xuXHRcdHRoaXMuc2V0UmVhZHkoZmFsc2UpO1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRzZXRUaW1lb3V0KHJlc29sdmUsIDUwMDApO1xuXHRcdH0pO1xuXHR9XG5cblx0bWFrZVNlY29uZCgpe1xuXHRcdHRoaXMuZ2V0RGF0YSgpLnRpbWUrPTE7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmNNYWluO1xuIiwiXG5jbGFzcyBuY1VzZXIgZXh0ZW5kcyBub3RGcmFtZXdvcmsubm90Q29udHJvbGxlciB7XG5cdGNvbnN0cnVjdG9yKGFwcCl7XG5cdFx0c3VwZXIoYXBwKTtcblx0XHR0aGlzLnNldFZpZXdzKHtcblx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0Y29tbW9uOiBmYWxzZSxcbiAgICAgICAgICAgIFx0bmFtZTogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgXHRwbGFjZUlkOiAnY29udGVudCdcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBuY1VzZXI7XG4iLCJcbmNsYXNzIG5jUG9zdCBleHRlbmRzIG5vdEZyYW1ld29yay5ub3RDb250cm9sbGVyIHtcblx0Y29uc3RydWN0b3IoYXBwKXtcblx0XHRzdXBlcihhcHApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmNQb3N0O1xuIiwiXG5jbGFzcyBuY0NvdW50cnkgZXh0ZW5kcyBub3RGcmFtZXdvcmsubm90Q29udHJvbGxlciB7XG5cdGNvbnN0cnVjdG9yKGFwcCl7XG5cdFx0c3VwZXIoYXBwKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5jQ291bnRyeTtcbiIsImltcG9ydCB7bmNJbml0LCBuY01haW59IGZyb20gJy4vbW9kdWxlcy9tYWluJztcbmltcG9ydCBuY1VzZXIgZnJvbSAnLi9tb2R1bGVzL3VzZXInO1xuaW1wb3J0IG5jUG9zdCBmcm9tICcuL21vZHVsZXMvcG9zdCc7XG5pbXBvcnQgbmNDb3VudHJ5IGZyb20gJy4vbW9kdWxlcy9jb3VudHJ5JztcblxubGV0IGFwcE9wdGlvbnMgPSB7XG5cdC8vdXJsIGZyb20gd2hpY2ggd2lsbCB0YWtlIGludGVyZmFjZU1hbmlmZXN0IGpzb24gZmlsZVxuXHRpbnRlcmZhY2VNYW5pZmVzdFVSTDogJy9mcmFtZXdvcmsvdGVzdC9hcHAvbWFuaWZlc3QuanNvbicsXG5cdC8vcm91dGVzIGZvciBjbGllbnQtc2lkZVxuXHRzaXRlTWFuaWZlc3Q6IHtcblx0XHQvL3JvdXRpZSByb3V0ZSBkZXNyaXB0aW9uOiBjb250cm9sbGVyIG5hbWUsIHJlYWwgY29udHJvbGxlciBpcyBmdW5jdGlvbiBwcmVmZml4ZWQgd2l0aCAnbmMnLCBuY01haW4sIG5jUHVibGljYXRpb25cblx0XHQnJzogbmNNYWluLFxuXHRcdCd1c2VyLzpwYXJhbT8nOiBuY1VzZXIsXG5cdFx0J3Bvc3QvOnBhcmFtPyc6IG5jUG9zdCxcblx0XHQnY291bnRyeS86cGFyYW0/JzogbmNDb3VudHJ5LFxuXHR9LFxuXHQvL2Jhc2UgY29udHJvbGxlciwgZXhlY3V0ZWQgb24gZXZlcnkgc2l0ZSBwYWdlIGJlZm9yZSBhbnkgb3RoZXIgY29udHJvbGxlclxuXHRpbml0Q29udHJvbGxlcjogbmNJbml0LFxuXHQvL2Zvcm0gYXV0byBnZW5lcmF0aW9uXG5cdGZvcm1zOiB7XG5cdFx0Ly9jb21tb24gaXMgZm9yIHByb2ZpbGVcblx0XHQvL2Fzc29jaWF0ZWQgb2JqZWN0IGlzIG9wdGlvbnMgZm9yIGdlbmVyYXRvciBvYmplY3Rcblx0XHQvL2RlZmF1bHQgZ2VuZXJhdG9yIG5vdEZvcm1cblx0XHRjb21tb246IHtcblx0XHRcdHRlbXBsYXRlVXJsOiAnL2ZyYW1ld29yay90ZXN0L3RlbXBsYXRlcy9saWIuaHRtbCdcblx0XHR9XG5cdH0sXG5cdHBhdGhzOntcblx0XHRjb21tb246ICcvZnJhbWV3b3JrL3Rlc3QvdGVtcGxhdGVzL2NvbW1vbicsXG5cdFx0bW9kdWxlczogJy9mcmFtZXdvcmsvdGVzdC9hcHAvbW9kdWxlcydcblx0fVxufTtcblxubm90RnJhbWV3b3JrLm5vdENvbW1vbi5zdGFydEFwcCgoKT0+IG5ldyBub3RGcmFtZXdvcmsubm90QXBwKGFwcE9wdGlvbnMpKTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLE1BQU0sU0FBUyxZQUFZLENBQUMsYUFBYSxDQUFDO0NBQy9DLFdBQVcsQ0FBQyxH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
