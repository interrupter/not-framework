(function () {
'use strict';

class ncInit extends notFramework.notController {
	constructor(app, params) {
		super(app);
		this.setModuleName('main');
		this.rebuildContainer();
		return this;
	}

	rebuildContainer() {
		document.getElementById("test").innerHTML = '<h1>Контроллер инициализации отработал, через 2 секунд подрубиться main контроллер, загрузит и отрендерит шаблон с простой связкой с данными</h1>';
	}
}

class ncMain extends notFramework.notController {
	constructor(app, params) {
		super(app);
		console.log('ncMain', ...arguments);
		this.setModuleName('main');
		this.setData(new notFramework.notRecord({}, {
			time: 0
		}));
		this.setViews({
			default: {
				common: false,
				name: 'default',
				//если не указано, по причине того что на текущий момент этот элемент не существует
				targetEl: document.querySelector('#test'),
				//смотрим здесь
				targetQuery: '#test'
			}
		});
		this.preload()
			.then(() => {
				this.setReady(true);
				setInterval(this.makeSecond.bind(this),1000);
			})
			.catch(notFramework.notCommon.report)
		return this;
	}

	preload() {
		this.setReady(false);
		return new Promise((resolve, reject) => {
			setTimeout(resolve, 2000);
		});
	}

	makeSecond(){
		this.getData().time+=1;
	}
}

class ncUser extends notFramework.notController {
	constructor(app){
		super(app);
		console.log('ncUser', ...arguments);
		this.setModuleName('user');
		this.setViews({
			default: {
				common: false,
				name: 'default',
				//если не указано, по причине того что на текущий момент этот элемент не существует
				targetEl: document.querySelector('#test'),
				//смотрим здесь
				targetQuery: '#test'
			}
		});
		return this;
	}
}

class ncPost extends notFramework.notController {
	constructor(app){
		super(app);
		console.log('ncPost', ...arguments);
		this.setModuleName('post');
		this.setViews({
			default: {
				common: false,
				name: 'default',
				//если не указано, по причине того что на текущий момент этот элемент не существует
				targetEl: document.querySelector('#test'),
				//смотрим здесь
				targetQuery: '#test'
			}
		});
		return this;
	}
}

class ncCountry extends notFramework.notController {
	constructor(app){
		super(app);
		console.log('ncCountry', ...arguments);
		console.log('module',this.constructor.toString());
		this.setModuleName('country');
		this.setViews({
			default: {
				common: false,
				name: 'default',
				//если не указано, по причине того что на текущий момент этот элемент не существует
				targetEl: document.querySelector('#test'),
				//смотрим здесь
				targetQuery: '#test'
			}
		});
		return this;
	}
}

let appOptions = {
	//url from which will take interfaceManifest json file
	manifestURL: '/framework/test/app/manifest.json',
	router:{
		root:'/framework/test/app/',
		//routes for client-side
		manifest: [
			{
				paths: ['main/(\.*)\/', 'main'],
				controller: ncMain
			},
			{
				paths: ['user/(\.*)\/(\.*)\/', 'user/(\.*)\/'],
				controller: ncUser
			},
			{
				paths: ['post'],
				controller: ncPost
			},
			{
				paths: ['country'],
				controller: ncCountry
			}
		],
		index: 'main/hello_kitty'
	},
	//base controller, executed on every site page before any other controller
	initController: ncInit,
	//form auto generation
	forms: {
		//common is for profile
		//associated object is options for generator object
		//default generator notForm
		common: {
			templateUrl: '/framework/test/templates/lib.html'
		}
	},
	paths:{
		common: '/framework/test/templates/common',
		modules: '/framework/test/app/modules'
	}
};

notFramework.notCommon.startApp(()=> new notFramework.notApp(appOptions));

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
